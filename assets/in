#!/bin/bash

# vim: set ft=sh

set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

destination=$1

source "$(dirname "${BASH_SOURCE[0]}")/common.sh"

# target not set, just emit input version, as prolly implicit get after put with source_file
if [[ -z $(jq --raw-output '.source.target // ""' < "${payload}") ]]; then
    jq --raw-output '.version | { version: . }' < "${payload}" >&3
    exit 0
fi

setup_bosh_access

if [[ -z ${destination} ]]; then
    echo "usage: $0 <path/to/destination>" >&2
    exit 1
fi

last_ref=$(jq --raw-output '.version.ref // ""' < "${payload}" )
echo "${last_ref}" > "${destination}/version"

if [[ ${all_configs} == "false" ]]; then
    bosh config --type="${config}" --name="${name}" > "${destination}/${config}-config.yml"
else
    old_IFS="${IFS}"
    IFS=$'\n'
    config_names=( $(bosh configs --json \
        | jq --raw-output \
            --arg "type" "${config}" \
            '.Tables[0].Rows[] | select(.type == $type) | .name') )
    IFS="${old_IFS}"
    for name in "${config_names[@]}"; do
        if [[ ${#includes[@]} -eq 0 ]]; then
            is_included="true"
        else
            is_included="false"
            for incl in "${includes[@]}"; do
                if [[ ${name} == ${incl} ]]; then
                    is_included="true"
                    break
                fi
            done
        fi
        for excl in "${excludes[@]}"; do
            if [[ ${name} == ${excl} ]]; then
                is_included="false"
                break
            fi
        done
        if [[ ${is_included} == "true" ]]; then
            bosh config --type="${config}" --name="${name}" \
                > "${destination}/${name}-${config}-config.yml"
        fi
    done
fi

jq --null-input \
    --arg "ref" "${last_ref}" \
    '{
        "version": { "ref": $ref },
        "metadata": [ {"name": "sha1", "value": $ref } ]
    }' \
  >&3
