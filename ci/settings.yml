---
# settings for the bosh-config-resource pipeline
meta:
  name:    bosh-config-resource
  release: BOSH-Config Concourse resource
  target:  gk-plat-devs
  url:     https://ci.gstack.io

  initial_version: "1.0.0"

  git:
    email:  ((git-commit-email))
    name:   ((git-commit-name))

  image:
    name: (( concat meta.private-registry.host "/gstack/gk-ops" ))
    registry:
      username: (( grab meta.private-registry.username ))
      password: (( grab meta.private-registry.password ))

  dockerhub:
    username:   ((dockerhub-username))
    password:   ((dockerhub-password))
    org:        cfcommunity
    repository: (( concat meta.dockerhub.org "/" meta.name ))
    short_desc:
      A Concourse resource that deals with cloud configs or runtime configs
      that live in some BOSH director

  private-registry:
    host:       harbor.ci.gstack.io
    username:   ((private-registry-username))
    password:   ((private-registry-password))
    repository: (( concat meta.private-registry.host "/" meta.dockerhub.org "/" meta.name ))

  aws:
    bucket:      (( grab meta.pipeline ))
    region_name: eu-west-3
    access_key:  ((aws-access-key))
    secret_key:  ((aws-secret-key))

  github:
    owner:        cloudfoundry-community
    repo:         bosh-config-resource
    branch:       master
    private_key:  ((github-private-key))
    access_token: ((github-access-token))

  slack:
    webhook:       ((slack-webhook))
    username:      ((slack-username))
    icon:          ((slack-icon-url))
    channel:       "#oss-pipelines-notifications"

groups:
  - name: (( grab meta.name ))
    jobs:
      - (( append ))
      - test

jobs:
  - name: build
    plan:
      - (( inline ))
      - in_parallel:
          - (( append ))
          - { get: alpine-latest, trigger: true, params: { format: oci } }
          - { get: bosh-cli,      trigger: true, params: { globs: [ "*-linux-amd64*" ] } }

      - # task: build-docker-image
        config:
          inputs:
            - (( append ))
            - name: alpine-latest
            - name: bosh-cli
        params:
          IMAGE_ARG_alpine: alpine-latest/image.tar

  - name: build-pr
    plan:
      - (( inline ))
      - in_parallel:
          - (( append ))
          - { get: alpine-latest, trigger: true, params: { format: oci } }

      - {} # put: git-pull-requests

      - # task: build-docker-image
        config:
          inputs:
            - (( append ))
            - name: alpine-latest
        params:
          IMAGE_ARG_alpine: alpine-latest/image.tar

  - name: test
    serial: true
    plan:
      - in_parallel:
          - { get: edge, passed: [ build ], trigger: true }
          - { get: git,  passed: [ build ], trigger: true }
      - task: test-image
        image: edge
        config:
          platform: linux
          inputs:
            - name: git
          run:
            path: bash
            args:
              - -c
              - |
                set -ueo pipefail -x

                failure="false"

                if [[ $(bosh --version) != "version "* ]]; then
                    >&2 echo "FAIL: expected 'bosh --version' to work, but got:"
                    (bosh --version | cat) || true
                    failure="true"
                fi

                out_dir=/tmp/mocked-bosh-cli

                mv /usr/bin/bosh /usr/bin/bosh.bak
                touch /usr/bin/bosh
                chmod +x /usr/bin/bosh
                cat > /usr/bin/bosh <<'EOF'
                #!/bin/bash
                out_dir=/tmp/mocked-bosh-cli
                mkdir -p "${out_dir}"
                [[ ! -f ${out_dir}/calls_count ]] && echo "0" > "${out_dir}/calls_count"

                calls_count=$(( $(< ${out_dir}/calls_count) + 1 ))
                echo "${calls_count}" > "${out_dir}/calls_count"
                out_prefix=$(printf "%03d" "${calls_count}")
                ln -sfn "${out_prefix}-invocation-args" "${out_dir}/last-invocation-args"
                ln -sfn "${out_prefix}-invocation-env"  "${out_dir}/last-invocation-env"
                out_prefix="${out_dir}/${out_prefix}"
                echo bosh "$@" > "${out_prefix}-invocation-args"
                env | grep "^BOSH_" > "${out_prefix}-invocation-env"

                verb="$1"; shift
                ops_files=()
                vars=()
                file_args=()
                while [[ $# -gt 0 ]]; do
                    case "$1" in
                        --json)       json="true" ;;
                        --type=*)     type="${1#--type=}" ;;
                        --name=*)     name="${1#--name=}" ;;
                        --ops-file=*) ops_files+=("${1#--ops-file=}") ;;
                        --var=*)      vars+=("${1#--var=}") ;;
                        *)            file_args+=("$1") ;;
                    esac
                    shift
                done
                case "${verb}" in
                    configs)
                        if [[ -n ${json} ]]; then
                            echo '{ "Tables": [ { "Rows": [
                              { "type": "cloud",   "name": "default" },
                              { "type": "cloud",   "name": "plip" },
                              { "type": "runtime", "name": "default" },
                              { "type": "runtime", "name": "plip" },
                              { "type": "runtime", "name": "plop" }
                            ] } ] }'
                        fi ;;
                    config)
                        echo "--- { type: '${type}', name: '${name}' }" ;;
                    update-config) : ;;
                    upload-release) : ;;
                    *)
                      echo >&2 "Unsupported 'bosh ${verb}' verb in this mock script"
                      exit 1
                esac
                exit 0
                EOF

                latest_ref_json=$(
                    jq --null-input \
                        --arg "target"        "plaf" \
                        --arg "client"        "plip" \
                        --arg "client_secret" "plop-plop" \
                        --arg "ca_cert"       "---cert---" \
                        --arg "config"        "cloud" \
                        --arg "name"          "plip" \
                        '{ "source": {
                              "target":        $target,
                              "client":        $client,
                              "client_secret": $client_secret,
                              "ca_cert":       $ca_cert,
                              "config":        $config,
                              "name":          $name
                            } }' \
                    | /opt/resource/check
                )
                latest_ref=$(jq --raw-output '.[0].ref' <<< "${latest_ref_json}")

                if [[ $(< "${out_dir}/last-invocation-args") \
                        != "bosh config --type=cloud --name=plip" ]]
                then
                    >&2 echo "FAIL: expected 'bosh config --type=cloud --name=plip' invocation, but got:"
                    >&2 cat "${out_dir}/last-invocation-args"
                    failure="true"
                fi
                # expected_ref computation: echo "--- { type: 'cloud', name: 'plip' }" | shasum -a 1
                expected_ref="4c138fbadfd65c62ad1034a7eaff1b0e1866c719"
                if [[ ${latest_ref} != ${expected_ref} ]]
                then
                    >&2 echo "FAIL: expected ref '${expected_ref}'," \
                        "but got: '${latest_ref}'"
                    failure="true"
                fi
                actual_target=$(awk -F= '/^BOSH_ENVIRONMENT=/{print $2}' "${out_dir}/last-invocation-env")
                if [[ ${actual_target} != "plaf" ]]
                then
                    >&2 echo "FAIL: expected target 'plaf'," \
                        "but got: '${actual_target}'. Detailed environment:"
                    >&2 cat "${out_dir}/last-invocation-env"
                    failure="true"
                fi
                actual_client=$(awk -F= '/^BOSH_CLIENT=/{print $2}' "${out_dir}/last-invocation-env")
                if [[ ${actual_client} != "plip" ]]
                then
                    >&2 echo "FAIL: expected client 'plip'," \
                        "but got: '${actual_client}'. Detailed environment:"
                    >&2 cat "${out_dir}/last-invocation-env"
                    failure="true"
                fi
                actual_client_secret=$(awk -F= '/^BOSH_CLIENT_SECRET=/{print $2}' "${out_dir}/last-invocation-env")
                if [[ ${actual_client_secret} != "plop-plop" ]]
                then
                    >&2 echo "FAIL: expected client secret 'plop-plop'," \
                        "but got: '${actual_client_secret}'. Detailed environment:"
                    >&2 cat "${out_dir}/last-invocation-env"
                    failure="true"
                fi
                actual_ca_cert=$(awk -F= '/^BOSH_CA_CERT=/{print $2}' "${out_dir}/last-invocation-env")
                if [[ ${actual_ca_cert} != "---cert---" ]]
                then
                    >&2 echo "FAIL: expected client secret '---cert---'," \
                        "but got: '${actual_ca_cert}'. Detailed environment:"
                    >&2 cat "${out_dir}/last-invocation-env"
                    failure="true"
                fi
                rm -f "${out_dir?missing}"/*



                mkdir -p "artifact"
                pulled_config_json=$(
                    jq --null-input \
                        --arg "target"        "plaf" \
                        --arg "client"        "plip" \
                        --arg "client_secret" "plop-plop" \
                        --arg "config"        "cloud" \
                        --arg "name"          "plip" \
                        --arg "ref"           "${latest_ref}" \
                        '{ "source": {
                              "target":        $target,
                              "client":        $client,
                              "client_secret": $client_secret,
                              "config":        $config,
                              "name":          $name
                            },
                            "version": { "ref": $ref },
                          }' \
                    | /opt/resource/in "artifact"
                )
                if [[ $(< "${out_dir}/last-invocation-args") \
                        != "bosh config --type=cloud --name=plip" ]]
                then
                    >&2 echo "FAIL: expected 'bosh config --type=cloud --name=plip' invocation, but got:"
                    >&2 cat "${out_dir}/last-invocation-args"
                    failure="true"
                fi
                if [[ $(< "artifact/cloud-config.yml") != "--- { type: 'cloud', name: 'plip' }" ]]
                then
                    >&2 echo "FAIL: expected '--- { type: 'cloud', name: 'plip' }' content, but got:"
                    >&2 cat "artifact/cloud-config.yml"
                    failure="true"
                fi
                actual_ref=$(jq --raw-output '.version.ref' <<< "${pulled_config_json}")
                if [[ ${actual_ref} != ${expected_ref} ]]
                then
                    >&2 echo "FAIL: expected '${expected_ref}' ref, but got: '${actual_ref}'"
                    failure="true"
                fi
                rm -f artifact/*
                rm -f "${out_dir?missing}"/*



                latest_ref_json=$(
                    jq --null-input \
                        --arg "target"        "plaf" \
                        --arg "client"        "plip" \
                        --arg "client_secret" "plop-plop" \
                        --arg "config"        "cloud" \
                        --argjson "all"       "true" \
                        --argjson "excludes"  '[ "abolutely-none" ]' \
                        '{ "source": {
                              "target":        $target,
                              "client":        $client,
                              "client_secret": $client_secret,
                              "config":        $config,
                              "all":           $all,
                              "excludes":      $excludes
                            } }' \
                    | /opt/resource/check
                )
                latest_ref=$(jq --raw-output '.[0].ref' <<< "${latest_ref_json}")
                rm -f "${out_dir?missing}"/*

                pulled_configs_json=$(
                    jq --null-input \
                        --arg "target"        "plaf" \
                        --arg "client"        "plip" \
                        --arg "client_secret" "plop-plop" \
                        --arg "config"        "cloud" \
                        --argjson "all"       "true" \
                        --arg "ref"           "${latest_ref}" \
                        --argjson "excludes"  '[ "abolutely-none" ]' \
                        '{ "source": {
                              "target":        $target,
                              "client":        $client,
                              "client_secret": $client_secret,
                              "config":        $config,
                              "all":           $all,
                              "excludes":      $excludes
                            },
                            "version": { "ref": $ref },
                          }' \
                    | /opt/resource/in "artifact"
                )
                for name in {default,plip}; do
                    if [[ ! -f "artifact/${name}-cloud-config.yml" ]]; then
                        >&2 echo "FAIL: missing 'artifact/${name}-cloud-config.yml' file" \
                            "from output artifact directory. Containing:"
                        >&2 ls -la "artifact"
                        failure="true"
                    fi
                done
                # expected_ref computation: for name in {default,plip}; do echo "--- { type: 'cloud', name: '${name}' }"; done | shasum -a 1
                expected_ref="d57d4a1f92039547b3ee7e45e2ce13063579a66d"
                actual_ref=$(jq --raw-output '.version.ref' <<< "${pulled_configs_json}")
                if [[ ${actual_ref} != ${expected_ref} ]]
                then
                    >&2 echo "FAIL: expected '${expected_ref}' ref, but got: '${actual_ref}'"
                    failure="true"
                fi
                rm -f artifact/*
                rm -f "${out_dir?missing}"/*



                latest_ref_json=$(
                    jq --null-input \
                        --arg "target"        "plaf" \
                        --arg "client"        "plip" \
                        --arg "client_secret" "plop-plop" \
                        --arg "config"        "runtime" \
                        --argjson "all"       "true" \
                        --argjson "excludes"  '[ "plop" ]' \
                        '{ "source": {
                              "target":        $target,
                              "client":        $client,
                              "client_secret": $client_secret,
                              "config":        $config,
                              "all":           $all,
                              "excludes":      $excludes
                            } }' \
                    | /opt/resource/check
                )
                latest_ref=$(jq --raw-output '.[0].ref' <<< "${latest_ref_json}")
                rm -f "${out_dir?missing}"/*

                pulled_configs_json=$(
                    jq --null-input \
                        --arg "target"        "plaf" \
                        --arg "client"        "plip" \
                        --arg "client_secret" "plop-plop" \
                        --arg "config"        "runtime" \
                        --argjson "all"       "true" \
                        --argjson "excludes"  '[ "plop" ]' \
                        --arg "ref"           "${latest_ref}" \
                        '{ "source": {
                              "target":        $target,
                              "client":        $client,
                              "client_secret": $client_secret,
                              "config":        $config,
                              "all":           $all,
                              "excludes":      $excludes
                            },
                            "version": { "ref": $ref },
                          }' \
                    | /opt/resource/in "artifact"
                )
                for name in {default,plip}; do
                    if [[ ! -f "artifact/${name}-runtime-config.yml" ]]; then
                        >&2 echo "FAIL: missing 'artifact/${name}-runtime-config.yml' file" \
                            "from output artifact directory. Containing:"
                        >&2 ls -la "artifact"
                        failure="true"
                    fi
                done
                # expected_ref computation: for name in {default,plip}; do echo "--- { type: 'runtime', name: '${name}' }"; done | shasum -a 1
                expected_ref="ba091d28b485f4e144b3cf106abde5e87a82bcd6"
                actual_ref=$(jq --raw-output '.version.ref' <<< "${pulled_configs_json}")
                if [[ ${actual_ref} != ${expected_ref} ]]
                then
                    >&2 echo "FAIL: expected '${expected_ref}' ref, but got: '${actual_ref}'"
                    failure="true"
                fi
                rm -f artifact/*
                rm -f "${out_dir?missing}"/*



                latest_ref_json=$(
                    jq --null-input \
                        --arg "target"        "plaf" \
                        --arg "client"        "plip" \
                        --arg "client_secret" "plop-plop" \
                        --arg "config"        "runtime" \
                        --argjson "all"       "true" \
                        --argjson "includes"  '[ "plip", "default" ]' \
                        '{ "source": {
                              "target":        $target,
                              "client":        $client,
                              "client_secret": $client_secret,
                              "config":        $config,
                              "all":           $all,
                              "includes":      $includes
                            } }' \
                    | /opt/resource/check
                )
                latest_ref=$(jq --raw-output '.[0].ref' <<< "${latest_ref_json}")
                rm -f "${out_dir?missing}"/*

                pulled_configs_json=$(
                    jq --null-input \
                        --arg "target"        "plaf" \
                        --arg "client"        "plip" \
                        --arg "client_secret" "plop-plop" \
                        --arg "config"        "runtime" \
                        --argjson "all"       "true" \
                        --argjson "includes"  '[ "plip", "default" ]' \
                        --arg "ref"           "${latest_ref}" \
                        '{ "source": {
                              "target":        $target,
                              "client":        $client,
                              "client_secret": $client_secret,
                              "config":        $config,
                              "all":           $all,
                              "includes":      $includes
                            },
                            "version": { "ref": $ref },
                          }' \
                    | /opt/resource/in "artifact"
                )
                for name in {default,plip}; do
                    if [[ ! -f "artifact/${name}-runtime-config.yml" ]]; then
                        >&2 echo "FAIL: missing 'artifact/${name}-runtime-config.yml' file" \
                            "from output artifact directory. Containing:"
                        >&2 ls -la "artifact"
                        failure="true"
                    fi
                done
                # expected_ref computation: for name in {default,plip}; do echo "--- { type: 'runtime', name: '${name}' }"; done | shasum -a 1
                expected_ref="ba091d28b485f4e144b3cf106abde5e87a82bcd6"
                actual_ref=$(jq --raw-output '.version.ref' <<< "${pulled_configs_json}")
                if [[ ${actual_ref} != ${expected_ref} ]]
                then
                    >&2 echo "FAIL: expected '${expected_ref}' ref, but got: '${actual_ref}'"
                    failure="true"
                fi
                rm -f artifact/*
                rm -f "${out_dir?missing}"/*



                echo "--- { type: 'cloud', name: 'plop' }" \
                    > "artifact/plop-cloud-cfg.yml"
                pushed_config_json=$(
                    jq --null-input \
                        --arg "target"        "plaf" \
                        --arg "client"        "plip" \
                        --arg "client_secret" "plop-plop" \
                        --arg "config"        "cloud" \
                        --arg "name"          "plop" \
                        --arg "manifest"      "cloud-config.yml" \
                        --arg "ops_file"      "an-ops-file.yml" \
                        --arg "some_var"      "some-value" \
                        '{ "source": {
                              "target":        $target,
                              "client":        $client,
                              "client_secret": $client_secret,
                              "config":        $config,
                              "name":          $name
                            },
                            "params": {
                              "manifest": $manifest,
                              "ops_files": [ $ops_file ],
                              "vars": { "some_var": $some_var }
                            }
                          }' \
                    | /opt/resource/out "artifact"
                )
                expected_invocation="bosh update-config --type=cloud --name=plop --ops-file=an-ops-file.yml --var=some_var=some-value cloud-config.yml"
                if [[ $(< "${out_dir}/001-invocation-args") \
                        != ${expected_invocation} ]]
                then
                    >&2 echo "FAIL: expected '${expected_invocation}' invocation, but got:"
                    >&2 cat "${out_dir}/001-invocation-args"
                    failure="true"
                fi
                # expected_ref computation: echo "--- { type: 'cloud', name: 'plop' }" | sha1sum
                expected_ref="c8648c3e6ce5946af81293c5768d5e0cefde69b6"
                actual_ref=$(jq --raw-output '.version.ref' <<< "${pushed_config_json}")
                if [[ ${actual_ref} != ${expected_ref} ]]
                then
                    >&2 echo "FAIL: expected '${expected_ref}' ref, but got: '${actual_ref}'"
                    failure="true"
                fi
                rm -f artifact/*
                rm -f "${out_dir?missing}"/*



                for name in {default,plip}; do
                    echo "--- { type: 'runtime', name: '${name}' }" \
                        > "artifact/${name}-runtime-cfg.yml"
                done
                pushed_configs_json=$(
                    jq --null-input \
                        --arg "target"        "plaf" \
                        --arg "client"        "plip" \
                        --arg "client_secret" "plop-plop" \
                        --arg "config"        "runtime" \
                        --argjson "all"       "true" \
                        --argjson "manifests" \
                            '{
                              "default": "default-runtime-cfg.yml",
                              "plip":    "plip-runtime-cfg.yml"
                            }' \
                        --arg "ops_file"      "an-ops-file.yml" \
                        --arg "some_var"      "some-value" \
                        '{ "source": {
                              "target":        $target,
                              "client":        $client,
                              "client_secret": $client_secret,
                              "config":        $config,
                              "all":           $all
                            },
                            "params": {
                              "manifests": $manifests,
                              "ops_files": [ $ops_file ],
                              "vars": { "some_var": $some_var }
                            }
                          }' \
                    | /opt/resource/out "artifact"
                )
                expected_invocation="bosh update-config --type=runtime --name=default --ops-file=an-ops-file.yml --var=some_var=some-value default-runtime-cfg.yml"
                if [[ $(< "${out_dir}/001-invocation-args") \
                        != ${expected_invocation} ]]
                then
                    >&2 echo "FAIL: expected '${expected_invocation}' invocation, but got:"
                    >&2 cat "${out_dir}/001-invocation-args"
                    failure="true"
                fi
                expected_invocation="bosh update-config --type=runtime --name=plip --ops-file=an-ops-file.yml --var=some_var=some-value plip-runtime-cfg.yml"
                if [[ $(< "${out_dir}/002-invocation-args") \
                        != ${expected_invocation} ]]
                then
                    >&2 echo "FAIL: expected '${expected_invocation}' invocation, but got:"
                    >&2 cat "${out_dir}/002-invocation-args"
                    failure="true"
                fi
                rm -f "${out_dir?missing}"/*



                if [[ ${failure} == true ]]; then
                    exit 1
                fi
                exit 0

        on_failure:
          put: notify
          params:
            channel:  (( grab meta.slack.channel ))
            username: (( grab meta.slack.username ))
            icon_url: (( grab meta.slack.icon ))
            text:     (( grab meta.slack.fail_text ))

  - name: pre
    plan:
      - (( inline ))
      - in_parallel:
          - (( merge on get ))
          - { get: edge, passed: [ (( replace )), test ] }
          - { get: git,  passed: [ (( replace )), test ] }

  - name: promote
    plan:
      - (( insert after 1 )) # insert after “task: release”
      - task: append-usage
        image: image
        config:
          platform: linux
          inputs:  [ name: gh, name: version ]
          outputs: [ name: gh ]
          run:
            path: bash
            args:
              - -c
              - |
                set -ueo pipefail
                cat >> gh/notes.md <<EOF

                ### Usage

                \`\`\`yaml
                resource_types:
                  - name: bosh-config
                    type: registry-image
                    source:
                      repository: ${DOCKERHUB_REPOSITORY}
                      tag: "$(< version/number)"
                \`\`\`
                EOF
        params:
          DOCKERHUB_REPOSITORY: (( concat meta.dockerhub.org "/" meta.name ))

resources:

  - name: git
    check_every: 24h
    webhook_token: ((concourse-webhook-token))

  - name: git-pull-requests
    check_every: 24h
    webhook_token: ((concourse-webhook-token))

  - name: edge
    source:
      username:   (( grab meta.private-registry.username ))
      password:   (( grab meta.private-registry.password ))
      repository: (( grab meta.private-registry.repository ))

  - name: latest
    source:
      username:   (( grab meta.private-registry.username ))
      password:   (( grab meta.private-registry.password ))
      repository: (( grab meta.private-registry.repository ))

  - name: version
    icon: github
    source:
      bucket:            (( prune ))
      region_name:       (( prune ))
      key:               (( prune ))
      access_key_id:     (( prune ))
      secret_access_key: (( prune ))
      driver:      git
      uri:         git@github.com:gstackio/gk-pipelines-compass.git
      branch:      master
      file:        (( concat "versions/" meta.pipeline ))
      private_key: ((github-private-key))
      git_user:    "((git-commit-name)) <((git-commit-email))>"

  - name: alpine-latest
    type: registry-image
    icon: docker
    check_every: 24h
    source:
      repository: alpine
      semver_constraint: "< 1970" # Avoid YYYYMMDD tags like '20231219'

  - name: bosh-cli
    type: github-release
    icon: github
    check_every: 24h
    source:
      user: cloudfoundry
      repository: bosh-cli
      access_token: (( grab meta.github.access_token ))
